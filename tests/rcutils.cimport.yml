
imports:

- name: "rcutils"
  sources: "deps/rcutils/include"
  globs: ["**/*.h"]
  skips:
  - "rcutils/stdatomic_helper/win32/stdatomic.h"
  - "rcutils/stdatomic_helper/gcc/stdatomic.h"
  - "rcutils/stdatomic_helper.h"
  includes:
  - "deps/rcutils/include"
  # removeModulePrefixes: "rcutils_$1_"

  fileMatchs:
  - fileMatch: "'rcutils/visibility_control.h'"
    deletes:
    - match: "'RCUTILS_PUBLIC'"
    - match: "'RCUTILS_PUBLIC_TYPE'"
  - fileMatch: "'rcutils/error_handling.h'"
    deletes:
    - match: "'make sure our math is right'"
      until: "'Maximum length calculations incorrect'"
      inclusive: true
  - fileMatch: "'rcutils/macros.h'"
    deletes:
    - match: "'RCUTILS_THREAD_LOCAL'"
  - fileMatch: "'rcutils/error_handling.h'"
    deletes:
    - match: "'__STDC_WANT_LIB_EXT1__'"
  - fileMatch: "'rcutils/testing/fault_injection.h'"
    C2NimConfig:
    - fileContents: |
        #mangle "'_rcutils_fault_injection_maybe_fail'" "rcutils_fault_injection_maybe_fail"
  - fileMatch: "'rcutils/types/' !'rcutils_ret' .+"
    C2NimConfig:
    - fileContents: |
        #skipInclude
      rawNims: |
        import rcutils_ret
        import ../allocator
  - fileMatch: "'rcutils/testing/fault_injection.h'"
    C2NimConfig:
    - fileContents: |
        #skipInclude
  - fileMatch: "'rcutils/types/array_list.h'"
    substitutes:
    - peg: "'struct rcutils_array_list_impl_s;'"
      repl: |
          typedef struct rcutils_array_list_impl_s
          {
            size_t size;
            size_t capacity;
            void * list;
            size_t data_size;
            rcutils_allocator_t allocator;
          } rcutils_array_list_impl_t;
    - peg: "'rcutils_array_list_impl_s'"
      repl: "rcutils_array_list_impl_t"

  - fileMatch: "'rcutils/types/hash_map.h'"
    substitutes:
    - peg: "'rcutils_hash_map_impl_s'"
      repl: "rcutils_hash_map_impl_t"
    - peg: "'struct rcutils_hash_map_impl_s;'"
      repl: |
        typedef struct rcutils_hash_map_impl_s
        {
          // This is the array of buckets that will store the keypairs
          rcutils_array_list_t * map;
          size_t capacity;
          size_t size;
          size_t key_size;
          size_t data_size;
          rcutils_hash_map_key_hasher_t key_hashing_func;
          rcutils_hash_map_key_cmp_t key_cmp_func;
          rcutils_allocator_t allocator;
        } rcutils_hash_map_impl_t;
    C2NimConfig:
    - rawNims: |
        import array_list
  - fileMatch: "'rcutils/types/string_map.h'"
    substitutes:
    - peg: "'rcutils_string_map_impl_s'"
      repl: "rcutils_string_map_impl_t"
    - peg: "'struct rcutils_string_map_impl_s;'"
      repl: |
        typedef struct rcutils_string_map_impl_s
        {
          char ** keys;
          char ** values;
          size_t capacity;
          size_t size;
          rcutils_allocator_t allocator;
        } rcutils_string_map_impl_t;
    C2NimConfig:
    - rawNims: |
        import ../allocator
        import ../types/array_list

  - fileMatch: "'rcutils/logging.h'"
    deletes:
    - match: "'RCUTILS_LOGGING_AUTOINIT'"
    - match: "'RCUTILS_DEFAULT_LOGGER_DEFAULT_LEVEL'"
    - match: "'g_rcutils_log_severity_names'"
    C2NimConfig:
    - rawNims: |
        import ./time
        proc RCUTILS_LOGGING_AUTOINIT*() {.importc: "RCUTILS_LOGGING_AUTOINIT", header: "rcutils/logging.h".}
  - fileMatch: "'rcutils/isalnum_no_locale.h'"
    C2NimConfig:
    - rawNims: |
        converter charToNum*(c: char): int = c.int 

  - fileMatch: "'.h'"
    deletes:
    - match: "'RCUTILS_STEADY_TIME'"
    substitutes:
    - peg: "'va_list' \\s+ '*'"
      repl: "va_list"
